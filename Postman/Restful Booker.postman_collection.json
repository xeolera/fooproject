{
	"info": {
		"_postman_id": "47e36b9b-ca32-4b6e-a203-3093ccd11b2d",
		"name": "Restful Booker",
		"description": "## Overview\nThe Restful Booker API is a sample API based on hotel bookings. The API contains endpoints to demonstrate CRUD operations. The source code can be obtained from https://github.com/mwinteringham/restful-booker\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Get Auth Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"my_booker_token\", pm.response.json().token);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Get auth token"
					},
					"response": []
				}
			]
		},
		{
			"name": "Bookings",
			"item": [
				{
					"name": "Get Bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(Number(pm.environment.get(\"statusCode1\")));",
									"});",
									"",
									"//Set global variable ",
									"pm.globals.set(\"checkAmount\", jsonData.length);",
									"console.log(pm.globals.get(\"checkAmount\"));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						},
						"description": "Get a list of all bookings"
					},
					"response": []
				},
				{
					"name": "Create new Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.globals.set(\"bookingID\", pm.response.json().bookingid);",
									"",
									"//Check status code variable",
									"pm.test(\"Check status code\", function () { ",
									"    pm.response.to.have.status(Number(pm.environment.get(\"statusCode1\"))) ",
									"});",
									"",
									"//First name variable",
									"pm.test(\"variable firstname is Sally\", function () {",
									"     pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"firstname1\"))",
									"});",
									"",
									"//Last name variable",
									"pm.test(\"variable lastname is Brown\", function () {",
									"     pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"lastname1\"))",
									"});",
									"",
									"//Total price variable",
									"pm.test(\"variable totalprice is 522\", function () {",
									"     pm.expect(jsonData.booking.totalprice).to.eql(Number(pm.environment.get(\"totalPrice1\")))",
									"});",
									"",
									"//Deposit variable",
									"pm.test(\"variable deposit is true\", function () {",
									"     pm.expect(jsonData.booking.depositpaid).to.eql(Boolean(pm.environment.get(\"depositPaidTrue\")))",
									"});",
									"",
									"//Additional needs variable",
									"pm.test(\"variable additionalneeds shows Breakfast\", function () {",
									"     pm.expect(jsonData.booking.additionalneeds).to.eql(pm.environment.get(\"additionalNeedsOption1\"))",
									"});",
									"",
									"//booking dates checkin'",
									"pm.test(\"checkin is 2020-03-06\", function () { ",
									"    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(pm.environment.get(\"checkin1\"))",
									"});",
									"",
									"//booking dates checkin'",
									"pm.test(\"checkout is 2020-03-09\", function () { ",
									"    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(pm.environment.get(\"checkout1\"))",
									"});",
									"",
									"",
									"// -------- Without variables ----------",
									"",
									"//First name test ",
									"pm.test(\"Check firstname of new Booking\", function () {",
									"    pm.expect(jsonData.booking.firstname).to.eql(\"Sally\")",
									"});",
									"",
									"//Last name test",
									"pm.test(\"Check lastname of new Booking\", function () {",
									"    pm.expect(jsonData.booking.lastname).to.eql(\"Brown\")",
									"});",
									"",
									"//Total price test",
									"pm.test(\"Total price is 111\", function () { ",
									"    pm.expect(jsonData.booking.totalprice).to.eql(522)",
									"});",
									"",
									"//depositpaid test",
									"pm.test(\"deposit paid is true\", function () { ",
									"    pm.expect(jsonData.booking.depositpaid).to.be.true",
									"});",
									"",
									"//booking dates checkin'",
									"pm.test(\"checkin is 2020-03-06\", function () { ",
									"    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(\"2020-03-06\")",
									"});",
									"",
									"//booking dates checkout'",
									"pm.test(\"checkin is 2020-03-09\", function () { ",
									"    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(\"2020-03-09\")",
									"});",
									"",
									"//additionalneeds test",
									"pm.test(\"check if needs breakfast\", function () { ",
									"    pm.expect(jsonData.booking.additionalneeds).to.eql(\"Breakfast\")",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstname\" : \"{{firstName1}}\",\r\n  \"lastname\" : \"{{lastName1}}\",\r\n  \"totalprice\" : {{totalPrice1}},\r\n  \"depositpaid\" : \"{{depositPaidTrue}}\",\r\n  \"additionalneeds\" : \"{{additionalNeedsOption1}}\",\r\n  \"bookingdates\" : {\r\n    \"checkin\" : \"{{checkin1}}\",\r\n    \"checkout\" : \"{{checkout1}}\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recieve new Bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(Number(pm.environment.get(\"statusCode1\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if recieve one more booking\", function () {\r",
									"    pm.expect(jsonData.length).to.eql(pm.globals.get(\"checkAmount\")+1)\r",
									"});\r",
									"\r",
									"console.log(pm.globals.get(\"checkAmount\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Booking by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Check status code\r",
									"pm.test(\"Check status code\", function () { \r",
									"    pm.response.to.have.status(200) \r",
									"});\r",
									"\r",
									"//First name test\r",
									"pm.test(\"Check firstname is not empty\", function () {\r",
									"    pm.expect(jsonData.firstname).to.not.eql(pm.environment.get(\"checkEmpty\"))\r",
									"});\r",
									"\r",
									"//Last name test\r",
									"pm.test(\"Check lastname is not empty\", function () {\r",
									"    pm.expect(jsonData.lastname).to.not.eql(pm.environment.get(\"checkEmpty\"))\r",
									"});\r",
									"\r",
									"//Total price test\r",
									"pm.test(\"Total price is not empty\", function () { \r",
									"    pm.expect(jsonData.totalprice).to.not.eql(pm.environment.get(\"checkEmpty\"))\r",
									"});\r",
									"\r",
									"//depositpaid test\r",
									"pm.test(\"deposit paid is not empty\", function () { \r",
									"    pm.expect(jsonData.depositpaid).to.not.eql(pm.environment.get(\"checkEmpty\"))\r",
									"});\r",
									"\r",
									"//booking dates checkin'\r",
									"pm.test(\"checkin is not empty\", function () { \r",
									"    pm.expect(jsonData.bookingdates.checkin).to.not.eql(pm.environment.get(\"checkEmpty\"))\r",
									"});\r",
									"\r",
									"//booking dates checkout'\r",
									"pm.test(\"checkin is not empty\", function () { \r",
									"    pm.expect(jsonData.bookingdates.checkout).to.not.eql(pm.environment.get(\"checkEmpty\"))\r",
									"});\r",
									"\r",
									"//additionalneeds test\r",
									"pm.test(\"check additionalneeds is not empty\", function () { \r",
									"    pm.expect(jsonData.additionalneeds).to.not.eql(pm.environment.get(\"checkEmpty\"))\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Check status code variable\r",
									"pm.test(\"Check status code\", function () { \r",
									"    pm.response.to.have.status(Number(pm.environment.get(\"statusCode1\"))) \r",
									"});\r",
									"\r",
									"//First name variable\r",
									"pm.test(\"Check firstname is James now\", function () {\r",
									"    pm.expect(jsonData.firstname).to.include(pm.environment.get(\"firstName2\"))\r",
									"});\r",
									"\r",
									"//Checkin date variable\r",
									"pm.test(\"Check checkin date if it's changed or not\", function () {\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.include(pm.environment.get(\"checkin1\"))\r",
									"});\r",
									"\r",
									"// ------- Without variables ---------\r",
									"\r",
									"//First name changed\r",
									"pm.test(\"Check firstname is James now\", function () {\r",
									"    pm.expect(jsonData.firstname).to.include(\"James\")\r",
									"});\r",
									"\r",
									"//First name changed\r",
									"pm.test(\"Check checkin date if it's changed or not\", function () {\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.include(\"2020-03-06\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{my_booker_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{firstName2}}\",\r\n    \"lastname\" : \"{{lastName1}}\",\r\n    \"totalprice\" : {{totalPrice2}},\r\n    \"depositpaid\" : \"{{depositPaidTrue}}\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin1}}\",\r\n        \"checkout\" : \"{{checkout1}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalNeedsOption1}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Booking (partial)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Check status code variable",
									"pm.test(\"Check status code\", function () { ",
									"    pm.response.to.have.status(Number(pm.environment.get(\"statusCode1\"))) ",
									"});",
									"",
									"//Check if variable firstname changed",
									"pm.test(\"Booking is updated\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"firstName3\"));",
									"});",
									"",
									"//Check if variable additional needs changed",
									"pm.test(\"additional needs is updated\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"additionalNeedsOption2\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "token={{my_booker_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{firstName3}}\",\r\n    \"lastname\" : \"{{lastName1}}\",\r\n    \"additionalneeds\" : \"{{additionalNeedsOption3}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var url = pm.environment.get(\"url\") + \"/booking/\" +  pm.globals.get(\"bookingID\");",
									"",
									"//Check status code",
									"pm.test(\"Check status code\", function () { ",
									"    pm.response.to.have.status(201) ",
									"});",
									"",
									"const getRequest = {",
									"        url: url,",
									"        method: 'GET'",
									"};",
									"",
									"pm.sendRequest(getRequest, function (err, res) {",
									"    if (err) { ",
									"        console.log(err);",
									"    }",
									"    ",
									"    console.log(res);",
									"    ",
									"    pm.test('Response should be Not Found', function () {",
									"        pm.expect(res.status).to.include(\"Not Found\");",
									"    });",
									"    ",
									"    pm.test(\"Response code 404\", function() {",
									"        pm.expect(res.code).to.equal(404);",
									"    })",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{my_booker_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}?=",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "All bookings requests "
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}